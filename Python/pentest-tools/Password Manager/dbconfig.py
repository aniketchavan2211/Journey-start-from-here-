from cryptography.fernet import Fernet, InvalidToken
import sqlite3
import os


# database name and key path 
db = 'database.db'
path = "key.key"

<<<<<<< HEAD
=======


def generate_new_key():
    new_key = Fernet.generate_key()
    with open(path, "wb") as fernet_key:
            fernet_key.write(new_key)
    print("New Fernet key generated and saved as 'key.key'.")

>>>>>>> 197abe2 (added auth, error handling, gen key , args features)
# Check if the key file exists
if not os.path.isfile(path):

    # Generate a Fernet key
    key = Fernet.generate_key()

    # Save the key to a file
    with open(path, 'wb') as fernet_key:
        fernet_key.write(key)

else:
    # Read the key from a file (assuming the key is stored in a file)
    with open(path, 'rb') as fernet_key:
        fernet_key = fernet_key.read()

<<<<<<< HEAD
class PasswordDecryptionError(Exception):
    pass

def generate_new_key():
    new_key = Fernet.generate_key()
    with open(path, "wb") as fernet_key:
            fernet_key.write(new_key)
    print("New Fernet key generated and saved as 'key.key'.")
=======
>>>>>>> 197abe2 (added auth, error handling, gen key , args features)

def create_database():
    conn = sqlite3.connect(db)
    cursor = conn.cursor()

<<<<<<< HEAD
    # Create the 'users' table with columns 'username', 'password_hash', and 'salt'
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            username TEXT PRIMARY KEY,
            password_hash TEXT,
            salt BLOB
        )
    ''')
=======
>>>>>>> 197abe2 (added auth, error handling, gen key , args features)
    # Create a table to store encrypted passwords
    cursor.execute(
        '''CREATE TABLE IF NOT EXISTS passwords (id INTEGER PRIMARY KEY, website TEXT, encrypted_password TEXT)''')

    conn.commit()
    conn.close()

<<<<<<< HEAD
=======

>>>>>>> 197abe2 (added auth, error handling, gen key , args features)
def store_password(website, password, fernet_key):
    encrypted_password = encrypt_password(password, fernet_key)
    conn = sqlite3.connect(db)
    cursor = conn.cursor()

    cursor.execute("INSERT INTO passwords (website, encrypted_password) VALUES (?, ?)",
                   (website, encrypted_password))
    conn.commit()
    conn.close()
<<<<<<< HEAD
    
=======


class PasswordDecryptionError(Exception):
    pass

>>>>>>> 197abe2 (added auth, error handling, gen key , args features)
def retrieve_password(website, fernet_key):
    conn = sqlite3.connect(db)
    cursor = conn.cursor()

    cursor.execute(
        "SELECT encrypted_password FROM passwords WHERE website=?", (website,))
    result = cursor.fetchone()
    
    if not result:
        return None

    try:
        password = decrypt_password(result[0], fernet_key)
        return password
    except InvalidToken:
        raise PasswordDecryptionError("Failed to decrypt the password. Keys may not match.")

    conn.close()

    return None

def encrypt_password(password, fernet_key):
    password = password
    fernet = Fernet(fernet_key)
    return fernet.encrypt(password.encode())

<<<<<<< HEAD
def decrypt_password(encrypted_password, fernet_key):
    fernet = Fernet(fernet_key)
    return fernet.decrypt(encrypted_password).decode()
=======

def decrypt_password(encrypted_password, fernet_key):
    fernet = Fernet(fernet_key)
    return fernet.decrypt(encrypted_password).decode()



'''
if __name__ == '__main__':
    # Create the database and store an encrypted password
    create_database()
    # store_password("example.com", "secretpassword", fernet_key)
    # Retrieve and decrypt the password
    # retrieved_password = retrieve_password("example.com", fernet_key)
    # if retrieved_password:
    #    print(f"Password for 'example.com': {retrieved_password}")
    # else:
    #    print("Password not found.")
'''
>>>>>>> 197abe2 (added auth, error handling, gen key , args features)

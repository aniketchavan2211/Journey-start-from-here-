from cryptography.fernet import Fernet, InvalidToken
import sqlite3
import os
import logging 

# Set up the logging configuration
log_filename = 'debug.log'
logging.basicConfig(filename=log_filename, level=logging.DEBUG, format='%(levelname)s - %(message)s')


# database name and key path
db = 'database.db'
# path = "key.key"

def debug(msg):
    logging.debug(msg)
    # print("[DEBUG] " + msg)

class PasswordDecryptionError(Exception):
    pass

'''
def key():
    # Check if the key file exists
    if not os.path.isfile(path):

        # Generate a Fernet key
        fernet_key = Fernet.generate_key()
        ###
        # Save the key to a file
        with open(path, 'wb') as fernet_key:
            fernet_key.write(key)
        ###
        # Store the key in the 'secret' table
        store_key_in_database(fernet_key)

    else:
        ###
        # Read the key from a file (assuming the key is stored in a file)
        with open(path, 'rb') as fernet_key:
            fernet_key = fernet_key.read()
        ###
        # Retrieve the key from the 'secret' table
        fernet_key = get_key_from_database()
        if fernet_key:
            print("Successfully retrieved the Fernet key.")
        else:
            print("Fernet key not found in the database.")
    return fernet_key
'''

def key():
    # Retrieve the Fernet key from the 'secret' table
    debug("Getting Fernet key from the 'secret' table.")
    fernet_key = get_key_from_database()
    debug(f"key func: {fernet_key}")

    if fernet_key:
        # If the key already exists in the database, return it
        debug("Fernet key retrieved successfully.")
        return fernet_key
    else:
        # If the key doesn't exist, generate a new one
        debug("Fernet key not found. Generating a new one.")
        new_key = Fernet.generate_key()
        # Store the new key in the 'secret' table
        fernet_key = store_key_in_database(new_key)
        debug("New Fernet key generated and stored.")
        return fernet_key

def generate_new_key():
    debug("Generating a new Fernet key.")
    new_key = Fernet.generate_key()
    fernet_key = store_key_in_database(new_key)
    debug("New Fernet key generated and stored.")
    return fernet_key

def create_database():
    debug("Creating the database if it doesn't exist.")
    conn = sqlite3.connect(db)
    cursor = conn.cursor()

    # Create the 'users' table with columns 'username', 'password_hash', and 'salt'
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            username TEXT PRIMARY KEY,
            password_hash TEXT,
            salt BLOB
        )
    ''')

    # Create a table to store encrypted passwords
    cursor.execute(
        '''CREATE TABLE IF NOT EXISTS passwords (id INTEGER PRIMARY KEY, website TEXT, encrypted_password TEXT)''')


    # Create the 'secret' table if it doesn't exist
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS secret (
            key_name TEXT PRIMARY KEY,
            key_value TEXT
        )
    ''')

    conn.commit()
    conn.close()

def check_duplicate_username(username):
    debug(f"Checking for duplicate username: {username}")
    conn = sqlite3.connect(db)
    cursor = conn.cursor()

    cursor.execute("SELECT username FROM users WHERE username=?", (username,))
    existing_user = cursor.fetchone()

    conn.close()

    if existing_user:
        debug(f"Found duplicate username: {username}")
    else:
        debug(f"Username {username} is not a duplicate.")

    return existing_user is not None

def store_user_in_database(username, hashed_password, salt, fernet_key):
    debug(f"Storing user in the database: {username}")
    conn = sqlite3.connect(db)
    cursor = conn.cursor()

    # Assuming you have a table named 'users' with columns 'username', 'password_hash', and 'salt'
    cursor.execute("INSERT INTO users (username, password_hash, salt) VALUES (?, ?, ?)", (username, hashed_password, salt))

    conn.commit()
    conn.close()

def store_key_in_database(fernet_key):
    debug(f"Storing user in the database")
    conn = sqlite3.connect(db)
    cursor = conn.cursor()

    # Insert or update the Fernet key in the 'secret' table
    cursor.execute("INSERT OR REPLACE INTO secret (key_name, key_value) VALUES (?, ?)", ("fernet_key", fernet_key.decode()))

    conn.commit()
    conn.close()

def get_key_from_database():
    debug("Getting the Fernet key from the 'secret' table.")
    conn = sqlite3.connect(db)
    cursor = conn.cursor()

    # Query the 'secret' table to retrieve the Fernet key
    cursor.execute("SELECT key_value FROM secret WHERE key_name = ?", ("fernet_key",))
    result = cursor.fetchone()

    conn.close()

    if result:
        key_value = result[0]
        fernet_key = key_value.encode() # Fernet(key_value.encode())
        return fernet_key
    else:
        debug("Fernet key not found in the database.")
        return None

def retrieve_user_info(username):
    debug(f"Retrieving user info for username: {username}")
    conn = sqlite3.connect(db)
    cursor = conn.cursor()

    # Assuming you have a table named 'users' with columns 'username', 'password_hash', and 'salt'
    cursor.execute("SELECT password_hash, salt FROM users WHERE username = ?", (username,))
    result = cursor.fetchone()

    conn.close()

    if result:
        password_hash, salt = result
        debug("User info retrieved successfully.")
        return password_hash, salt
    else:
        debug("User info not found.")
        return None, None

def store_password(website, password, fernet_key):
    debug(f"Fernet key in store_passwd func before encrypt_password() func: {fernet_key}")
    debug(f"Storing password for website: {website}")
    encrypted_password = encrypt_password(password, fernet_key)
    debug(f"Fernet key after encrypt_passwd func which return and store in encrypted_password: {fernet_key}")
    conn = sqlite3.connect(db)
    cursor = conn.cursor()

    cursor.execute("INSERT INTO passwords (website, encrypted_password) VALUES (?, ?)",
                   (website, encrypted_password))
    conn.commit()
    conn.close()

def retrieve_password(website, fernet_key):
    debug(f"Retrieving password for website: {website}")
    conn = sqlite3.connect(db)
    cursor = conn.cursor()

    cursor.execute(
        "SELECT encrypted_password FROM passwords WHERE website=?", (website,))
    result = cursor.fetchone()

    if not result:
        debug(f"Password not found for website: {website}")
        return None

    try:
        password = decrypt_password(result[0], fernet_key)
        debug("Password retrieved and decrypted successfully.")
        return password

    except InvalidToken:
        debug("Failed to decrypt the password. Keys may not match.")
        raise PasswordDecryptionError("Failed to decrypt the password. Keys may not match.")

    conn.close()

    return None

def encrypt_password(password, fernet_key):
    debug(f"Encrypting the password. {fernet_key}")
    fernet = Fernet(fernet_key)
    debug(f"Fernet key after return Fernet() func and store in fernet: {fernet}")
    encrypted_password = fernet.encrypt(password.encode())
    debug(f"Fernet key after encryption done on passwd {fernet_key} and return encrypted_password {encrypted_password}")
    return encrypted_password

def decrypt_password(encrypted_password, fernet_key):
    debug("Decrypting the password.")
    fernet = Fernet(fernet_key)
    decrypted_password = fernet.decrypt(encrypted_password).decode()
    return decrypted_password

logging.shutdown()
#!/usr/bin/env python3

import os, getpass, argparse, hashlib
from string import ascii_lowercase, ascii_uppercase, digits, punctuation
from secrets import choice
from dbconfig import *

## alphabets, digits, meta characters(special characters)
data = ascii_lowercase + ascii_uppercase + digits + punctuation

def generate_salt():
    salt = os.urandom(16)  # Generate a random 16-byte salt
    return salt

def generate_random_password():
    length = int(input("Enter the length of Password:  "))
    password = ''.join(choice(data) for _ in range(length))
    return password

def hashed_passwd(password, salt):
    context = password.encode('utf-8')
    salted_password = salt + context
    sha512 = hashlib.sha512()
    sha512.update(salted_password)
    password = sha512.hexdigest()
    return password

def create_passwd(website, password):
    store_password(website, password, fernet_key)
    print("Password Stored Successfully!")

def show_passwd(website, fernet_key):
    data = retrieve_password(website, fernet_key)
    if data:
        print("Stored Password:", data)
    else:
        print("Password not found.")

def create_user(username, master_password):
    salt = os.urandom(16)  # Generate a random salt
    hashed_password = hashed_passwd(master_password, salt)
    store_user_in_database(username, hashed_password, salt)

def verify_user(username, master_password):
    password_hash, salt = retrieve_user_info(username)

    if password_hash is None or salt is None:
        # Handle the case where the user doesn't exist or the database is empty
        print("User not found or database is empty. Please create a user account.")
        return False

    salted_password = hashed_passwd(master_password, salt)
    return password_hash == salted_password

def register():
    # User Register
    username = input("Create a new username: ")
    master_password = getpass.getpass("Create a MASTER password:  ")
    verify_master_password = getpass.getpass("Confirm again:  ")    
    return username, master_password, verify_master_password

def login():
    username = input("Enter your username: ")
    master_password = getpass.getpass("Enter your MASTER password: ")

    user_is_authenticated = verify_user(username, master_password)
    if user_is_authenticated == False:
      print("\nWrong Username or Password\nUser Authentication Failed\nQuiting...")
    return user_is_authenticated

def main():
  create_database()  # Create a database file if it doesn't exist
  # username, master_password, verify_master_password = register()

  # create_user(username, master_password)

  try:
    # useris = auth()
    # useris = verify_user(username, master_password)
    parser = argparse.ArgumentParser(description="Password Management Tool")
    parser.add_argument("-g", "--generate", action="store_true", help="Generate a random password")
    parser.add_argument("-c", "--create", action="store_true", help="Create a new password entry")
    parser.add_argument("-s", "--show", action="store_true", help="Show a stored password")
    parser.add_argument("-k", "--gen-key", "-generate-key", action="store_true", help="Generate a new Fernet key")
    # Add login and create account options
    parser.add_argument("-l", "--login", action="store_true", help="Log in with an existing account")
    parser.add_argument("-cs", "--create-account", action="store_true", help="Create a new account")


    args = parser.parse_args()

    if args.login:
      user_is_authenticated = login()
      if user_is_authenticated:
        print("User Authenticated")
        print("Choose an action:")
        print("1. Create a new password")
        print("2. Show a stored password")

        action_choice = input("Enter the action number: ")

        if action_choice == "1":
          website = input("Enter website, username, app name: ")
          password = generate_random_password()
          print("Generated Password:", password)
          create_passwd(website, password)
          print("Password registered for", website)

        elif action_choice == "2":
          website = input("Enter website, username, app name: ")
          show_passwd(website, fernet_key)

        else:
          print("Invalid action number.")

    elif args.create_account:
      create_database()
      username, master_password, verify_master_password = register()

      if check_duplicate_username(username):
        print(f"User '{username}' already exists. Account creation not allowed.")
        return

      create_user(username, master_password)
      print("Account created successfully.")

    elif args.generate:
      password = generate_random_password()
      print("Generated Password:", password)

    elif args.create:
      login()
      create_database()  # Create a database file if it doesn't exist
      website = input("Enter website, username, app name: ")
      password = generate_random_password()
      print("Generated Password:", password)
      create_passwd(website, password)
      print("Password registered for", website)

    elif args.show:
      login()
      website = input("Enter website, username, app name: ")
      show_passwd(website, fernet_key)

    elif args.gen_key:
      generate_new_key()

    else:
      parser.print_help()

  except KeyboardInterrupt:
      print("\nOperation was interrupted by the user.\nQuiting...")
  except PasswordDecryptionError as e:
      print(f"Password decryption error: {e}")

if __name__ == '__main__':
    main()

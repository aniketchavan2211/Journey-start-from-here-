#!/usr/bin/env python3

from string import ascii_lowercase, ascii_uppercase, digits, punctuation
from secrets import choice
import os
import hashlib
from dbconfig import create_database, store_password, retrieve_password, fernet_key, generate_new_key, PasswordDecryptionError
import getpass
import argparse


## alphabets, digits, meta characters(special characters)
data = ascii_lowercase + ascii_uppercase + digits + punctuation
length = 16

def generate_salt():
    salt = os.urandom(16)  # Generate a random 16-byte salt
    return salt

def generate_random_password():
    password = ''.join(choice(data) for _ in range(length))
    return password

def hashed_passwd(password, salt):
    context = password.encode('utf-8')
    salted_password = salt + context
    sha512 = hashlib.sha512()
    sha512.update(salted_password)
    password = sha512.hexdigest()
    return password

def verify(salted_password, input_password, salt):
    input_password = hashed_passwd(input_password, salt)
    if salted_password == input_password: 
        # print("Password is Correct")
        useris=True
    else:
        # print("Password is INCORRECT")
        useris=False
    return useris


def create_passwd(website, password):
    store_password(website, password, fernet_key)
    print("Password Stored Successfully!")

def show_passwd(website, fernet_key):
    data = retrieve_password(website, fernet_key)
    if data:
        print("Stored Password:", data)
    else:
        print("Password not found.")

def auth():
    master_password = getpass.getpass("Enter a MASTER key: ")  # password prompt(getpass) hides password
    salt = generate_salt()
    salted_password = hashed_passwd(master_password, salt)
    input_password = 'admin'  # getpass.getpass("Enter the MASTER key again for verification: ")
    useris = verify(salted_password, input_password, salt)
    if useris == True:
        print("User Authentication: SUCCESS")
    else:
        raise AuthenticationError("Authentication failed.")
    return useris

def main():
    try:
        useris = auth()

        if useris == True:
            parser = argparse.ArgumentParser(description="Password Management Tool")
            parser.add_argument("-g", "--generate", action="store_true", help="Generate a random password")
            parser.add_argument("-c", "--create", action="store_true", help="Create a new password entry")
            parser.add_argument("-s", "--show", action="store_true", help="Show a stored password")
            parser.add_argument("-k", "--gen-key", "-generate-key", action="store_true", help="Generate a new Fernet key")

            args = parser.parse_args()

            if args.generate:
                password = generate_random_password()
                print("Generated Password:", password)

            elif args.create:
                create_database()  # Create a database file if it doesn't exist
                website = input("Enter website, username, app name: ")
                password = generate_random_password()
                print("Generated Password:", password)
                create_passwd(website, password)
                print("Password registered for", website)

            elif args.show:
                website = input("Enter website, username, app name: ")
                show_passwd(website, fernet_key)
            
            elif args.gen_key:
                generate_new_key()

            else:
                parser.print_help()
        else:
            print("User is not Authenticated")
    
    except KeyboardInterrupt:
        print("\nOperation was interrupted by the user.\nQuiting...")
    except PasswordDecryptionError as e:
        print(f"Password decryption error: {e}")
    except Exception as e:
        print(f"An error occurred: {e}")



if __name__ == '__main__':
    main()
